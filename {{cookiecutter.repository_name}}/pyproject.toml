[tool.poetry]
name = "{{cookiecutter.pypi_name}}"
version = "0.0.0"
description = "{{cookiecutter.description}}"
authors = ["{{cookiecutter.author_name}} <{{cookiecutter.author_email}}>"]
license = "{{cookiecutter.license_spdx}}"
readme = 'README.rst'
repository = "{{cookiecutter.repository_http_url}}"
packages = [
    { include = "{{cookiecutter.package_name}}" },
]

{%- if cookiecutter.enable_resource_directory == "y" %}
include = ["res/"]
{%- endif %}

[tool.poetry.scripts]
{%- if cookiecutter.enable_cli == "y" %}
{{cookiecutter.package_name}} = "{{cookiecutter.package_name}}._cli:main"
{%- else %}
# script_name = "package.module:function"
{%- endif %}

[tool.poetry.dependencies]
python = "{{cookiecutter.python_version}}"

[tool.poetry.dev-dependencies]
{%- if cookiecutter.enable_autoflake == "y" %}
autoflake = "^1.3.1"
{%- endif %}
{%- if cookiecutter.enable_isort == "y" %}
isort = "^4.3.21"
{%- endif %}
{%- if cookiecutter.enable_black == "y" %}
black = "^19.10b0"
{%- endif %}
{%- if cookiecutter.enable_pylint == "y" %}
pylint = "^2.5.2"
pylint-exit = "^1.1.0"
{%- endif %}
{%- if cookiecutter.enable_bandit == "y" %}
bandit = "^1.6.2"
{%- endif %}
{%- if cookiecutter.enable_mypy == "y" %}
mypy = "^0.780"
{%- endif %}
{%- if cookiecutter.enable_pytest == "y" %}
pytest = "^5.4.1"
{%- endif %}
{%- if cookiecutter.enable_coverage == "y" and cookiecutter.enable_pytest == "y" %}
pytest-cov = "^2.8.1"
{%- endif %}
{%- if cookiecutter.enable_coverage == "y" %}
coverage = "^5.1"
{%- endif %}
{%- if cookiecutter.enable_codecov == "y" %}
codecov = "^2.1.4"
{%- endif %}
{%- if cookiecutter.enable_sphinx == "y" %}
sphinx = "^3.1.0"
sphinx-autoapi = "^1.4.0"
sphinx-autodoc-annotation = "^1.0-1"
{%- endif %}
{%- if cookiecutter.enable_bump2version == "y" %}
bump2version = "^1.0.0"
{%- endif %}
{%- if cookiecutter.enable_tox == "y" %}
tox = "^3.15.2"
{%- endif %}

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

{%- if cookiecutter.enable_tox == "y" %}
[tool.tox]
# According to tox docs
# The tox configuration can also be in pyproject.toml (if you want to avoid an extra file).
# Currently only the old format is supported via legacy_tox_ini, a native implementation is planned though.
legacy_tox_ini = """
[tox]
envlist = {{cookiecutter.python_version | replace("^", "")}}
isolated_build = True

[tox:.package]
# note tox will use the same python version as under what tox is installed to package
# so unless this is python 3 you can require a given python version for the packaging
# environment via the basepython key
basepython = python3

[testenv]
commands =
    poetry install
    pytest --quiet --exitfirst tests
"""
{%- endif %}
