{% if cookiecutter.use_poetry == "yes" -%}
[tool.poetry]
name = "{{ cookiecutter.repo_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.description }}"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>"]
license = "{{ cookiecutter.license }}"
readme = "README.rst"
{% if cookiecutter.repo_url != 'none' -%}
repository = "{{ cookiecutter.repo_url}}"
{%- endif %}
{% if cookiecutter.docs_url != 'none' -%}
documentation = "{{ cookiecutter.docs_url }}"
{%- endif %}
{% if '.' in cookiecutter.package_name %}
packages = [
	{ include = "{{ cookiecutter.package_name.split('.')[0] }}" },
]
{% endif %}
{% if cookiecutter.pypi_package == "yes" -%}
keywords = ["{{ cookiecutter.keywords.split(' ') | join('", "') }}"]
classifiers = [
	"Operating System :: OS Independent",
	"Typing :: Typed",
	"Natural Language :: English",
	{% if cookiecutter.version.startswith("0.") -%}
	"Development Status :: 4 - Beta",
	{%- else -%}
	"Development Status :: 5 - Production/Stable",
	# TODO: Insert trove license classifier here.
	{%- endif %}
	{% if cookiecutter.trove_intended_audience -%}
	"{{ cookiecutter.trove_intended_audience.split(',') | join('",\n\t"') }}",
	{%- endif %}
	{%- if cookiecutter.trove_topics -%}
	"{{ cookiecutter.trove_topics.split(',') | join('",\n\t"') }}",
	{%- endif %}
	{%- if cookiecutter.trove_other_classifiers -%}
	"{{ cookiecutter.trove_other_classifiers.split(',') | join('",\n\t"') }}",
	{%- endif %}
]
{%- endif %}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
{%- endif %}

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
addopts = "--quiet --numprocesses=auto --doctest-modules --doctest-glob='*.rst'"

[tool.coverage.run]
branch = true
data_file = "build/.coverage"

[tool.coverage.html]
directory = "build/htmlcov"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    'pragma: no cover',
    'def __repr__',
    'if self\.debug',
    'raise AssertionError',
    'raise NotImplementedError',
    'if False:',
    'if __name__ == .__main__.:',
	'if TYPE_CHECKING',
    '@(abc\.)?abstractmethod',
    '\w*\.\.\.$',
    '\w*pass$',
]

# [tool.pylint]
# Too long for inclusion here
# see pylintrc

[tool.mypy]
strict = true
pretty = true
error_summary = true
color_output = true
#mypy_path = stubs

[tool.bump2version]
current_version = "{{ cookiecutter.version }}"
commit = true
tag = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{39,310,311,312,313}
# Make sure to install the Python versions listed here in the Nix flake.
isolated_build = True

[testenv]
allowlist_externals =
    poetry
    {toxinidir}/script.py
skip_install = true
commands_pre =
    poetry install
commands =
    {toxinidir}/script.py per-env-tests
"""

{% if cookiecutter.use_poetry == "yes" %}
[tool.poetry.dev-dependencies]
autoimport = "^1.5.0"
isort = "^5.13.2"
black = "^24.4.2"
pylint = "^3.2.3"
mypy = "^1.10.0"
pytest = "^8.2.2"
pytest-xdist = "^3.6.1"
pytest-cov = "^5.0.0"
coverage = "^7.5.3"
tox = "^4.15.1"
radon = "^6.0.1"
# Package docutils (0.21.post1) not found.
docutils = "^0.18"
twine = "^5.1.0"
# regular Nix pkg
# proselint = "^0.13.0"
rstcheck = "^6.2.1"
bump2version = "^1.0.1"
setuptools = "^69.5.1"
"charmonium.async-subprocess" = "^0.1.7"
typer = "^0.12.3"
termcolor = "^2.4.0"
typing-extensions = "^4.12.2"
# ipython = "^7.29.0"
# ipdb = "^0.13.13"
types-setuptools = "^69.5.0.20240415"
types-toml = "^0.10.8.20240310"
types-termcolor = "^1.1.6.2"
# rest

[tool.poetry.dependencies]
python = "^3.9"
# make sure to keep the Python versions here consistent with those tested by Tox (tool.tox.legacy_tox_ini.tox.envlist).
{% endif %}
